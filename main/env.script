

function init(self)
  self.position = go.get_world_position("#")
  self.offset_x = go.get("offset", "position").x

  local active_scale = go.get_world_scale("active_box#boundary")
  local active_size = go.get("active_box#boundary", "size")
  local position = go.get_world_position("active_box")
  
  self.active_position = position
  self.active_box = vmath.mul_per_elem(active_size, active_scale)

  print("position: ", position, "active_box: ", self.active_box)
  local mini = position - .5 * self.active_box
  local maxi = position + .5 * self.active_box
  print("mini: ", mini, " maxi: ", maxi)
  
  -- msg.post("active_box#boundary", "disable")
  msg.post(".", "acquire_input_focus")
end

function on_message(self, message_id, message, sender)
  if message_id == hash("arrived") then
    print("player arrived at:" .. go.get_id())
    
  end
end

function on_look(self)
  print("looking at " .. self.id)
end

function on_action(self)
  print("acting on " .. self.id)
end

function on_item(self, item)
  print("using item: " .. item .. " on " .. self.id)
end

function on_input(self, action_id, action)
  if action_id == hash("click") and action.released then
    print(action.x .. "   " .. action.y)
    if point_inside_box(action, self.active_position, self.active_box) then
      print("hit")
      msg.post("player", "walk_to", { to_x = self.position.x + self.offset_x })
    end
  end
end

function point_inside_box(point, box, size)
  return 
    point.x < box.x + size.x/2 and 
    point.x > box.x - size.x/2 and 
    point.y < box.y + size.y/2 and 
    point.y > box.y - size.y/2 
end